= Homepage =

Welcome to Ink.
Ink is an interface kit for quick development of web interfaces, simple to use and expand on. It uses a combination of HTML, CSS and JavaScript to offer modern solutions for building layouts, display common interface elements and implement interactive features that are content-centric and user friendly for both your audience and your designers & developers.

= About =

* What it is

Ink is an interface kit for quick development of web interfaces, simple to use and expand on. It uses a combination of HTML, CSS and JavaScript to offer modern solutions for building layouts, display common interface elements and implement interactive features that are content-centric and user friendly for both your audience and your designers & developers.

You have several options to use Ink
	* Download and use CSS and our boilerplate HTML as is
	* Create your exceptions using CSS or Less
	* Just get slices of markup and CSS off ou documentation to solve specific problems

* Why use ink

Ink presents a unique vision of what a front end framework should be. More than a ready made solution (although it can be that), we went for a builing block approach. By offering generic components that you can use in different contexts to obtain consistent results, Ink is both flexible and powerful while remaining easy to use.

Our grid system is different from any other currently out there as it offers you true flexibility to build your layouts. Because it's all percentage-based, the grid is truly fluid and you don't have to count columns and rely on memorizing offsets and spans. Just naturally divide up your space in 10 to 100% blocks, divided into the most common steps, such as halves, quarters, fifths, etc.

As to styling, we offer generic styling classes which can be applied to many elements in different contexts to obtain a consistent result. Say you want a zebra-stripe table but also a zebra-stripe list. With Ink, you use the same class .ink-zebra and the CSS takes care of applying correct layout and styling according to what type of markup element you used it on.

This makes Ink very easy to learn and reuse over time, making your life easier. And with a quick configurator, you can change the properties of any styiling class so that the default .ink-warning class is no longer red with white text, but becomes yellow with red text, for example. You can then consistently use .ink-warning to get a red paragraph on a yellow background, or a yellow button with red text or even a yellow table row with red text in the table cells.

* Who we are

We are SAPO. You might mistake us for a small startup, because that's our spirit. We are in fact Portugal's largest internet enterprise with businesses ranging from content and advertising to services and app development, all based on a solid, 17-year old web brand and integrated into a multinational telecomunitations company, Portugal Telecom.

* What's in store

We want to keep up with the times, while keeping Ink flexible and easy to use. We'll be revising and updating the framework using a major-version scheme in order to keep previous versions solid and not force updates to anyone who doesn't want them.

We'll also be expanding Ink to be a lot more than just a framework or a collection of Javascript components and code snippets. We'll be adding design patterns and publishing a huge knowledge base of best practices in design, coding, usability, accessibility and more, making Ink your one-stop reference for web front-end development and design.

= Changelog =

* What's included in each revision, posted by date

= Layout =

= Container unit =

The .ink-container class is where you define the width of your layout.
You should define either a static width, a relative width or a maximum width for this element and use it to contain your layout.

Example:

Let's say you need your page container to always be 80% of your view port.

Markup

<div class="ink-container">
	<div class="g100">
		<p>Content</p>
	</div>
</div>

CSS

In conf.css, define:

.ink-container {
	width:80%;
}

= Division units =

Ink uses a percentage-based container logic which is flexible and promotes the use of fluid layouts.

You can setup 10, 20, 25, 30, 33, 40, 50, 66, 70, 75, 80, 90 and 100% width units and combinations therein and think in a simple, percentage-oriented, manner, leaving the calculations for each browser box model up to Ink.

Example:

Imagine you have a webpage with a main content area which takes up 75% of your layout and a sidebar which uses up the remaining space. The content area is subsequently divided in two equal sized columns.

Here's the markup:

<div class="ink-container">
	<div class="g75 maincontent">
		<div class="g50 firstcolumn"></div>
		<div class="g50 secondcolumn"></div>
	</div>
	<div class="g25 sidebar"></div>
</div>

You should use the G classes for layout only and add an additional semantic class for further costumization. In this case, you could then use your conf.css file to customize .maincontent, .sidebar, etc.

= Spacer units =

Since Ink's approach to layout is not grid-based, but space division based, we needed to keep things simple spacing wise. Despite meaning the need for extra markup elements, we feel the gained simplicity means you can build stuff faster and easier.

Ink uses seven kinds of spacer unit: a vertical spacer, a horizontal spacer, and all-around spacer and one for each side of your box (top, right, bottom, left). To use them, put a block-level element within your layout element with the corresponding spacer class.

Example:

Let's pick up our previous example and add space all around (vertical and horizontal) to our main content and sidebar, and only horizontal space to our columns.

Here's the code:

<div class="ink-container">
	<div class="g75 maincontent">
		<div class="space">
			<div class="g50 firstcolumn">
				<div class="h_space">
					<p>Content</p>
				</div>
			</div>
			<div class="g50 secondcolumn"></div>
		</div>
	</div>
	<div class="g25 sidebar"></div>
</div>